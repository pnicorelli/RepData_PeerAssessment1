available.packages
available.packages()
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("KernSmooth")
library(KernSmooth)
x <- factor( c("anime", "poi", "sticci"))
x
x <- factor( c("anime", "poi", "sticci", "poi"))
x
unclass(x)
data.load( "~/Desktop/logger.log")
read.table( "~/Desktop/logger.log")
x <- read.table( "~/Desktop/logger.log")
x <- readLines( "~/Desktop/logger.log")
x
library(rjson)
install
install.packages("rjson")
library(rjson)
library(rjson)
install.packages("rjson")
version
install.packages("rjson")
install.packages("rjson")
library(rjson)
x <- fromJSON( "~/Desktop/logger.log")
x <- fromJSON( "/home/willy/Desktop/logger.log")
pwd
x <- fromJSON( file="/home/willy/Desktop/logger.log")
x
logger <-file("/home/willy/Desktop/logger.log")
lines <- readLines(logger)
lines
lines <- fromJSON( readLines(logger))
lines
lines <- readLines(logger)
j <- fromJSON( lines )
j
lines
jj = sapply( lines, fromJSON)
jj
lines[1]
ops = fromJSON(lines[1])
ops
ops
fromJSON(lines)
fromJSON(lines[1:7])
lines[1:2]
lines[1:4]
install.packages("swirl")
library("swirl")
swircl()
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z * 2 + 1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
play()
ls()
nxt()
list.files()
?list.files()
?list.files
args(list.file)
args(list.files)
old.dir <- getwd()
?mkdir
dir.create("./testdir")
dir.create("testdir")
?setwd
setwd("testdir")
?file.create
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.access("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
dir.create("testdir2")
dir.create("testdir2/testdir3", recursive=TRUE)
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,10, by=0.5)
info()
?seq
seq(1,10, by=0.5)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep( c(0,1,2), times=10)
rep( c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "bully")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, spe="-")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data<-sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_na <- my_data == NA
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
?info
?help
exit()
quit()
library(datasets)
data(iris)
?iris
Sepal.Length
iris[Sepal.Length]
iris$Sepal.Length
y <- iris$Sepal.Length
y
mean(y)
iris$Species
iris$Species = 'virginica'
class(iris)
subset(iris$Species, viriginca)
subset(iris$Species, virigica)
?subset
y <- iris$Species
y
library(datasets)
data(iris)
iris$Species
species <- iris$Species
species
as.vector(species)
species <- as.vector(species)
species
species = "virginica"
subset(iris, Species == "virginica")
vg <- subset(iris, Species == "virginica")
vg
mean(vg[Sepal.Length])
mean(vg[[Sepal.Length]])
vg$Sepal.Length
mean(vg$Sepal.Length)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
?apply
mean(iris$Sepal.Length)
apply(iris[, 1:4], 21, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 3, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
iris[, 1:4]
class( iris[, 1:4] )
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(hp, cyl, mean))
res <- with(mtcars, tapply(hp, cyl, mean))
res
res[8] - res[4]
class(res)
res["8"] - res["4"]
debug(ls)
ls
ls
?debug
exit
quit
d
debug
?
exit
{
installed.packages("RMySQL")
install.packages('RMySQL', type='source')
install.packages('RMySQL', type='source')
install.packages('RMySQL', type='source')
library(RMySQL)
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery( ucscDb, "show databases"); dbDisconnect();
result <- dbGetQuery( ucscDb, "show databases"); dbDisconnect(ucscDb);
result
library(XML)
url <- "http://hyle.appspot.com/palinsesto/serata"
html <- htmlTreeParse(url, useInternalNodes = T)
html
xpathSApply( html, "//span[@class=o]")
xpathSApply( html, "//span[@class=e]")
xpathSApply( html, "//span[@class='e']")
xpathSApply( html, "//span[@class='e']", xmlValue)
html
xpathSApply( html, "//span[@class='gy']", xmlValue)
xpathSApply( html, "//h2", xmlValue)
xpathSApply( html, "//h2")
library(httpr)
library(httr)
myapp <- oauth_app("github", key="9bb42b7d20d4174b4aa1", secret="a2927d983b03950186c4841f8fe3dab5f4e71e38")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
installed.packages(httpuv)
library(httpuv)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
req
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)oauth_endpoints("github")
oauth_endpoints("github")
myapp <- oauth_app("github", "9bb42b7d20d4174b4aa1", "a2927d983b03950186c4841f8fe3dab5f4e71e38")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
github.app <- oauth_app("github","9bb42b7d20d4174b4aa1", "a2927d983b03950186c4841f8fe3dab5f4e71e38")
github.urls <- oauth_endpoint(NULL, "authorize", "access_token",base_url = "https://github.com/login/oauth")
github.token <- oauth2.0_token(github.urls,github.app)
github
oauth_endpoints("github")
myapp <- oauth_app("github", "9bb42b7d20d4174b4aa1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "4aaac0ec8b7808ab5cd3")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "4aaac0ec8b7808ab5cd3")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
myapp <- oauth_app("github", "4aaac0ec8b7808ab5cd3")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
myapp <- oauth_app("github", "4aaac0ec8b7808ab5cd3")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
myapp <- oauth_app("github", "4aaac0ec8b7808ab5cd3", "c72b329e35f6c1635b4b225fec90b9c9c0b2f975")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
page = "http://biostat.jhsph.edu/~jleek/contact.html "
page = "http://biostat.jhsph.edu/~jleek/contact.html"
page = "http://biostat.jhsph.edu/~jleek/contact.html"
html = url(page)
html
hh <- readLines(html)
h[10]
hh[10]
nchar(hh[10])
nchar(hh[c(10,20)])
nchar(hh[c(10,20,30,100)])
page = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
html = url(page)
html = curl(page)
data <- read.csv(page, header = TRUE)
page = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
data <- read.csv(page, header = TRUE)
printf "Hello World"
hw <- paste("Hello World")
hw
hw[1]
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2)
install.packages("ggplot2")
install.packages(ggplot2)
install.packages('ggplot2')
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
date()
setwd("~/works/coursera/repdata-014/RepData_PeerAssessment1")
unzip("activity.zip")
unzip("activity.zip")
data <- read.csv("activity.csv")
summary(data)
str(data)
data$aadate <- as.Date(date$date)
aadate <- as.Date(date$date)
?as.Date
aadate <- as.Date(date$date, "Y-m-d")
aadate <- as.Date(data$date, "Y-m-d")
aadate
data$date
aadate <- as.Date(date$date, "%y-%m-%d")
aadate <- as.Date(data$date, "%y-%m-%d")
aadate
aadate <- as.Date(data$date, "%Y-%m-%d")
aadate
data$date <- as.Date(data$date, "%Y-%m-%d")
data
str(data)
data$date <- as.Date(data$date, "%Y-%m-%d")
tapply(data$steps, data$date, sum)
stepsPerDay <- tapply(data$steps, data$date, sum)
barplot(stepsPerDay)
barplot(stepsPerDay ~ data$date)
barplot(stepsPerDay ~ data$steps)
barplot( ~ stepsPerDay )
stepsPerDay
str(  stepsPerDay )
summary(  stepsPerDay )
hist(  stepsPerDay )
hist(  stepsPerDay )
stepsMeanPerInterval <- tapply(data$steps, data$interval, mean, na.rm = T)
which.max(stepsMeanPerInterval)
a<-which.max(stepsMeanPerInterval)
names(a)
summary(a)
str(a)
names(a)
a$names(a)
a[names(a)]
?names
names(a)[1]
names(a)[2]
a[1]
a[2]
a[1][1]
a[1][1][1]
a$835
a$835
a["835"]
a[835]
a$835
names(a)
aaaaaa <-names(a)
aaaaaa
str(aaaaaa)
sum(is.na(data$steps))
howManyNA <- sum(is.na(data$steps))
foreach(data as row)
data[ date=="2012-10-01"]
data$date=="2012-10-01"
day = data$date=="2012-10-01"
mean( data[day] )
mean( data[day]$steps )
mean( data$steps[day] )
mean( data$steps[day], na.rm=T )
data$steps[day]
data[day]
day = data$date=="2012-10-01"
data[ date == "2012-10-01"]
subset(data, date=="2012-10-01")
subset(data, date=="2012-10-10")
subset(data, date=="2012-10-10")
subset(data, date=="2012-10-10")
subset(data, date=="2012-10-01")
v <- subset(data, date=="2012-10-01")
mean(v$steps)
mean(v$steps, na.rm = TRUE)
mean(v$steps, na.rm = TRUE)
v <- subset(data, date=="2012-10-01")
v
v <- subset(data, date=="2012-10-01")
dataD <- data
for (i in 1:nrow(dataD)) {
if (is.na(dataD$steps[i])) {
daily <- subset(dataD, date== dataD$date[i] )
dailyMean <- mean( dataD$date[i] )
dailyMean <- ifelse(!is.na(dailyMean),dailyMean,0)
dataD$steps[i] <- dailyMean
}
}
summary(dataD)
summary(data)
mean(data$steps)
mean(dataD$steps)
box( data ~ dataD)
data
data$interval == 1340
sum(data$interval == 1340)
mean(data$interval == 1340)
mean(dtat$steps, data$interval == 1340)
mean(data$steps, data$interval == 1340)
mean(data$steps[data$interval == 1340]
mean(data$steps[data$interval == 1340])
data$steps[data$interval == 1340]
mean( data$steps[data$interval == 1340], rm.na=T)
mean( data$steps[data$interval == 1340], rm.na=TRUE)
data$steps[data$interval == 1340]
class ( data$steps[data$interval == 1340] )
median ( data$steps[data$interval == 1340] )
median ( data$steps[data$interval == 1340] , na.rm=T)
median ( data$steps[data$interval == 1] , na.rm=T)
data$steps[data$interval == 1]
data$steps[data$interval == 122]
data$steps[data$interval == 1223]
data$steps[data$interval == 1340]
data$steps[data$interval == 1341]
data$steps[data$interval == 1342]
str( data$steps[data$interval == 1340] )
summary( data$steps[data$interval == 1340] )
mean( data$steps[data$interval == 1340] )
mean( data$steps[data$interval == 1340] , rm.na=T)
mean( data$steps[data$interval == 1340] , rm.na=TRUE)
mean( data$steps[data$interval == 1340] , na.rm=TRUE)
data$day<-as.factor(ifelse(weekdays(data$date)==c("Saturday","Sunday"), "weekend", "weekday"))
data$day
summary(data$day)
data$day<-as.factor(ifelse(weekdays(data$date)==c("Sabato","Domenica"), "weekend", "weekday"))
summary(data$day)
weekdays(data$date)
data$day<-as.factor(ifelse(weekdays(data$date)==c("sabato","domenica"), "weekend", "weekday"))
summary(data$day)
data$day<-as.factor(ifelse(weekdays(data$date)==c("sabato","domenica"), "weekend", "weekday"))
plot(data)
device.off()
dev.off()
plot(data)
plot(data, type="l")
plot(x= data$date, y=data$steps, type="l")
data$isWeek<-as.factor(ifelse(weekdays(data$date)==c("sabato","domenica"), 0, 1))
stepsOnWeekend <- subset(data, data$isWeek == 0)
plot(x = stepsOnWeekend$date, y=stepsOnWeekend$steps, type = "l", main = ("Steps vs. Interval"),
xaxt = "n", ylab = "Week ends")
mm = mean(stepsOnWeekend)
mm <- tapply( data$steps, data$date, mean)
plot (mm)
plot (mm, type="l")
averagestepsweekdaysubset <- aggregate(steps~interval+day, data=data, mean)
plot(averagestepsweekdaysubset)
plto(steps~interval|day, data=averagestepsweekdaysubset, type="l", layout = c(1,2),  xlab="Interval", ylab="Averaged numer of steps")
plot(steps~interval|day, data=averagestepsweekdaysubset, type="l", layout = c(1,2),  xlab="Interval", ylab="Averaged numer of steps")
plot(steps~interval|day, data=averagestepsweekdaysubset, type="l", xlab="Interval", ylab="Averaged numer of steps")
stepsMeanPerWeekday <- tapply(data$steps, list(data$interval, data$isWeek), mean,
na.rm = T)
